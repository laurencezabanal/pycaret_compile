# -*- coding: utf-8 -*-
"""
Created on Sat Jun 25 19:25:17 2022

@author: John Laurence
"""

# seaborn in matplotlib - tkinter doesn't need it
#import matplotlib
#matplotlib.use('TkAgg')

# embed matplotlib in tkinter 
import tkinter as tk
from tkinter import ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# seaborn example
from string import ascii_letters
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import pandas as pd
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure

import numpy as np


import openpyxl
from tqdm import tqdm
from pycaret.regression import *
import tkinter as tk
#from tkinter import *
from tkinter import ttk
from tkcalendar import Calendar
import os

#import tkinter  as tk 
from tkcalendar import DateEntry
from dateutil.relativedelta import relativedelta
from datetime import date, datetime


def create_plot():
    sns.set(style="white")

    # Generate a large random dataset
    rs = np.random.RandomState(33)
    d = pd.DataFrame(data=rs.normal(size=(100, 26)),
                     columns=list(ascii_letters[26:]))

    # Compute the correlation matrix
    corr = d.corr()

    # Generate a mask for the upper triangle
    mask = np.zeros_like(corr, dtype=np.bool)
    mask[np.triu_indices_from(mask)] = True

    # Set up the matplotlib figure
    f, ax = plt.subplots(figsize=(11, 9))

    # Generate a custom diverging colormap
    cmap = sns.diverging_palette(220, 10, as_cmap=True)

    # Draw the heatmap with the mask and correct aspect ratio
    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
                square=True, linewidths=.5, cbar_kws={"shrink": .5})

    return f

def create_plot2():
    sns.set(style="white")
    fig2, ax = plt.subplots(figsize=(10, 8))
    #fig2 = Figure(figsize=(5, 4), dpi=100)
    #t = np.arange(0, 3, .01)
    #fig2.add_subplot(111).plot(t, 2 * np.sin(2 * np.pi * t))
    
    canvas = FigureCanvasTkAgg(fig2, master=root)  # A tk.DrawingArea.
    canvas.draw()
    canvas.get_tk_widget().grid(row=4, column=0, sticky="w",pady=2)
    
    # toolbar = NavigationToolbar2Tk(canvas, root)
    # toolbar.update()
    canvas.get_tk_widget().grid(row=4, column=0, sticky="w",pady=2)
    
    return fig2


def my_forecast(*args): # triggered when value of string varaible changes
    if(len(sel.get())>4):
        date_from = datetime.strptime(sel.get(),'%m/%d/%y')
        date_to = datetime.strptime(sel2.get(),'%m/%d/%y')
        store_number = 'store_' + ent_store.get()
        item_number = 'item_' + ent_item.get()
        model_reference = store_number +'_' + item_number

        
        all_dates2 = pd.date_range(start=date_from, end = date_to, freq = 'D')
        score_df2 = pd.DataFrame()
        # add columns to dataset
        score_df2['date'] = all_dates2
        score_df2['month'] = [i.month for i in score_df2['date']]
        score_df2['year'] = [i.year for i in score_df2['date']]
        score_df2['quarter'] = [i.quarter for i in score_df2['date']]
        score_df2['day_of_week'] = [i.dayofweek for i in score_df2['date']]
        score_df2['day_of_year'] = [i.dayofyear for i in score_df2['date']]
        score_df2.head()

        
        #load model
        path_init = r"C:\Users\John Laurence\Documents\Data Science Projects\Experiments\Demand Forecasting\trained_models"
        path = path_init + '\\' + model_reference
        dt_saved = load_model(path)
        
        p2 = predict_model(dt_saved, data=score_df2)
        p2['store number']=store_number
        p2['item number'] =item_number
        p2['model reference'] = model_reference
        p2.to_excel(model_reference+"Forecast.xlsx")
        
        final_df2 = p2[['date','Label']]
        final_df2.rename(columns={'Label': 'Forecast'},inplace=True)
        #final_df2 = p2[['date','Label','sales']]
        
        fig, ax = plt.subplots(1,1,figsize=(10,8))
        df_plot2 = final_df2.set_index('date')
        df_plot2[['Forecast']].plot(ax=ax,linewidth=2,legend=False)
        
        #df_plot2[['Label','sales']].plot(ax=ax,linewidth=2)
        # #ax.fill_between(df_plot.index,
        #                 df_plot['auto_arima_season_length-12_lo-80'],
        #                 df_plot['auto_arima_season_length-12_hi-80'],
        #                 alpha=0.35,
        #                 color='green',
        #                 label = 'auto_arima_level_80'
        
        # )
        
        # ax.fill_between(df_plot.index,
        #                 df_plot['auto_arima_season_length-12_lo-95'],
        #                 df_plot['auto_arima_season_length-12_hi-95'],
        #                 alpha=0.2,
        #                 color='green',
        #                 label = 'auto_arima_level_95'
        
        # )
        
        ax.set_title('Sales Forecast of '+model_reference,fontsize=22)
        ax.set_ylabel('Sales Forecast',fontsize=20)
        ax.set_xlabel('Date',fontsize=20)
        #ax.legend(prop={'size':15})
        ax.grid()
        for label in (ax.get_xticklabels() + ax.get_yticklabels()):
            label.set_fontsize(20)
        
        
        canvas = FigureCanvasTkAgg(fig, master=root)  # A tk.DrawingArea.
        canvas.draw()
        canvas.get_tk_widget().grid(row=4, column=0, sticky="w",pady=2)
        
        # toolbar = NavigationToolbar2Tk(canvas, root)
        # toolbar.update()
        canvas.get_tk_widget().grid(row=4, column=0, sticky="w",pady=2)

        #print(score_df2)
        print("success")
        #print(p2)





# --- main ---

root = tk.Tk()
root.title("Time Series!")

label = tk.Label(root, text="Matplotlib with Seaborn in Tkinter")
#label.pack()

# Store Number
frm_store_entry = ttk.Frame(master=root)

ent_store = ttk.Entry(master=root, width=10,textvariable=frm_store_entry)
ent_store.grid(row=0, column=1, sticky="we",pady=2)

lbl_temp_store = ttk.Label(master=root, text="STORE # (Input: 1 to 10) :")
lbl_temp_store.grid(row=0, column=0, sticky="w",pady=2)


# Item Number
frm_item_entry = ttk.Frame(master=root)

ent_item = ttk.Entry(master=root, width=10,textvariable=frm_item_entry)
ent_item.grid(row=1, column=1, sticky="we",pady=2)

lbl_temp_item = ttk.Label(master=root, text="ITEM # (Input: 1 to 50) :")
lbl_temp_item.grid(row=1, column=0, sticky="w",pady=2)

# Date Start
sel=tk.StringVar() # declaring string variable 

cal=DateEntry(root,selectmode='day',textvariable=sel)
cal.grid(row=2,column=1,padx=20,sticky="we",pady=2)

lbl_date_from = ttk.Label(master=root, text="Forecast Start Date :")
lbl_date_from.grid(row=2, column=0, sticky="w",pady=2)

# Date End
sel2=tk.StringVar() # declaring string variable 

cal2=DateEntry(root,selectmode='day',textvariable=sel2)
cal2.grid(row=3,column=1,padx=20,sticky="we",pady=2)

lbl_date_to = ttk.Label(master=root, text="Forecast End Date :")
lbl_date_to.grid(row=3, column=0, sticky="w",pady=2)


#fig = create_plot()
fig = create_plot2()

canvas = FigureCanvasTkAgg(fig, master=root)  # A tk.DrawingArea.
canvas.draw()
canvas.get_tk_widget().grid(row=4, column=0, sticky="w",pady=2)

# button = tk.Button(root, text="Quit", command=root.destroy)
# button.grid(row=5, column=0, sticky="w",pady=2)



def on_key_press(event):
    print("you pressed {}".format(event.key))
    key_press_handler(event, canvas, toolbar)


# canvas.mpl_connect("key_press_event", on_key_press)


def _quit():
    root.quit()     # stops mainloop
    root.destroy()  # this is necessary on Windows to prevent
                    # Fatal Python Error: PyEval_RestoreThread: NULL tstate

#btn_quit = tk.Button(master=root, text="Quit", command=_quit)
#btn_quit.grid(row=4, column=0, sticky="w",pady=2)


lbl_space = ttk.Label(master=root, text="")
lbl_space.grid(row=5, column=0, sticky="w",pady=2)
lbl_space = ttk.Label(master=root, text="")
lbl_space.grid(row=6, column=0, sticky="w",pady=2)


btn_model = ttk.Button(master=root,text="Run Forecast",command=my_forecast)
#btn_model.place(x=100, y=100)
#btn_model.grid(row=4,column=0)
btn_model.place(relx=0.5, rely=1, relwidth=0.5, anchor='s')


tk.mainloop()
